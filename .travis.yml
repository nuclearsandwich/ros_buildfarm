language: python
python:
  - "3.5"
sudo: false
env:
  global:
    - CONFIG_URL=https://raw.githubusercontent.com/ros-infrastructure/ros_buildfarm_config/production/index.yaml
    - ROS_DISTRO_NAME=melodic
    - OS_NAME=ubuntu
    - OS_CODE_NAME=bionic
    - ARCH=amd64
    - ROS_BUILDFARM_PULL_REQUEST_BRANCH=$TRAVIS_PULL_REQUEST_BRANCH
matrix:
  include:
    - language: python
      python: "3.5"
      sudo: required
      services:
        - docker
      env: JOB_TYPE=devel REPOSITORY_NAME=roscpp_core
      before_script:
        - pip install colcon-core colcon-test-result
        - python setup.py install
        - mkdir job && cd job
        - ln -s .. ros_buildfarm
      script:
        - generate_devel_script.py $CONFIG_URL $ROS_DISTRO_NAME default $REPOSITORY_NAME $OS_NAME $OS_CODE_NAME $ARCH > job.sh
        - . job.sh -y
        - (exit $catkin_test_results_RC)
    - language: python
      python: "3.5"
      sudo: required
      services:
        - docker
      env: JOB_TYPE=doc REPOSITORY_NAME=roscpp_core
      before_script:
        - python setup.py install
        - mkdir job && cd job
        - ln -s .. ros_buildfarm
      script:
        - generate_doc_script.py $CONFIG_URL $ROS_DISTRO_NAME default $REPOSITORY_NAME $OS_NAME $OS_CODE_NAME $ARCH > job.sh
        - sh job.sh -y
        - ls -alR generated_documentation/api_rosdoc
    - language: python
      python: "3.5"
      sudo: required
      services:
        - docker
      env: JOB_TYPE=release PACKAGE_NAME=rostime
      before_script:
        - python setup.py install
        - mkdir job && cd job
        - mkdir source && cd source && ln -s ../.. ros_buildfarm && cd ..
        - mkdir binary && cd binary && ln -s ../.. ros_buildfarm && cd ..
      script:
        - generate_release_script.py $CONFIG_URL $ROS_DISTRO_NAME default $PACKAGE_NAME $OS_NAME $OS_CODE_NAME $ARCH > job.sh
        - sh job.sh -y
    - language: python
      python: "3.5"
      sudo: required
      services:
        - docker
      env: JOB_TYPE=prerelease UNDERLAY_REPOSITORY_NAMES="roscpp_core" OVERLAY_PACKAGE_NAMES=roscpp
      before_script:
        - pip install colcon-core colcon-test-result
        - python setup.py install
        - mkdir job && cd job
        - ln -s .. ros_buildfarm
      script:
        - generate_prerelease_script.py $CONFIG_URL $ROS_DISTRO_NAME default $OS_NAME $OS_CODE_NAME $ARCH $UNDERLAY_REPOSITORY_NAMES --pkg $OVERLAY_PACKAGE_NAMES --output-dir .
        - . prerelease.sh -y
        - (exit $catkin_test_results_RC_underlay) && (exit $catkin_test_results_RC_overlay)
    - language: python
      python: "3.5"
      sudo: required
      services:
        - docker
      env: JOB_TYPE=external_prerelease
      before_script:
        - pip install colcon-core colcon-test-result
        - python setup.py install
        - mkdir job && cd job
        - ln -s .. ros_buildfarm
      script:
        - git clone -b dummy_package https://github.com/ros-infrastructure/ros_buildfarm catkin_workspace/src/ros_buildfarm
        - generate_prerelease_script.py $CONFIG_URL $ROS_DISTRO_NAME default $OS_NAME $OS_CODE_NAME $ARCH --output-dir .
        - ./prerelease.sh -y
    - language: python
      python: "3.5"
      sudo: required
      services:
        - docker
      env: JOB_TYPE=status_pages
      before_script:
        - python setup.py install
        - mkdir status_pages && cd status_pages
      script:
        - build_blocked_releases_page.py $CONFIG_URL $ROS_DISTRO_NAME
        - build_release_compare_page.py $CONFIG_URL kinetic $ROS_DISTRO_NAME
        - build_release_status_page.py $CONFIG_URL $ROS_DISTRO_NAME default
        - build_repos_status_page.py $ROS_DISTRO_NAME http://packages.ros.org/ros-shadow-fixed/ubuntu http://packages.ros.org/ros/ubuntu --os-code-name-and-arch-tuples $OS_CODE_NAME:source $OS_CODE_NAME:amd64 $OS_CODE_NAME:arm64 $OS_CODE_NAME:armhf $OS_CODE_NAME:i386 --cache-dir ./debian_repo_cache --output-name $ROS_DISTRO_NAME_$OS_CODE_NAME
        - ls -al
install:
  - pip install catkin-pkg EmPy PyYAML rosdistro
  - pip install coverage flake8 flake8-docstrings flake8-import-order nose pep8 pyflakes
script:
  - python setup.py nosetests -s --tests test
notifications:
  email: false
