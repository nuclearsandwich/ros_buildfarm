#!/usr/bin/env python3

# Copyright 2014, 2016 Open Source Robotics Foundation, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import os
import sys

from ros_buildfarm.catkin_workspace import call_catkin_make_isolated
from ros_buildfarm.catkin_workspace import clean_workspace
from ros_buildfarm.catkin_workspace import ensure_workspace_exists
from ros_buildfarm.common import Scope


def main(argv=sys.argv[1:]):
    parser = argparse.ArgumentParser(
        description="Invoke 'catkin_make_isolated' on a workspace while "
                    "enabling and running the tests")
    parser.add_argument(
        '--rosdistro-name',
        required=True,
        help='The name of the ROS distro to identify the setup file to be '
             'sourced (if available)')
    parser.add_argument(
        '--workspace-root',
        required=True,
        help='The root path of the workspace to compile')
    parser.add_argument(
        '--parent-result-space', nargs='*',
        help='The paths of the parent result spaces')
    parser.add_argument(
        '--clean-before',
        action='store_true',
        help='The flag if the workspace should be cleaned before the '
             'invocation')
    parser.add_argument(
        '--clean-after',
        action='store_true',
        help='The flag if the workspace should be cleaned after the '
             'invocation')
    args = parser.parse_args(argv)

    ensure_workspace_exists(args.workspace_root)

    if args.clean_before:
        clean_workspace(args.workspace_root)

    parent_result_spaces = None
    if args.parent_result_space:
        parent_result_spaces = args.parent_result_space

    use_merge_install = args.rosdistro_name in (
        'indigo', 'jade', 'kinetic', 'lunar', 'melodic')

    try:
        with Scope('SUBSECTION', 'build workspace in isolation'):
            arguments = [
                '--cmake-args', '-DCATKIN_ENABLE_TESTING=1',
                '-DCATKIN_SKIP_TESTING=0',
                '--executor', 'sequential',
                '--event-handlers', 'console_direct+']
            if use_merge_install:
                # clean CMake cache to find dependencies from merged install
                # after previously building without merging
                arguments += [
                    '--cmake-clean-cache',
                    '--merge-install', '--install-base', 'install_merged']
            arguments += ['--test-result-base', 'test_results']
            env = dict(os.environ)
            env['MAKEFLAGS'] = '-j1'
            rc = call_catkin_make_isolated(
                args.rosdistro_name, args.workspace_root,
                arguments,
                parent_result_spaces=parent_result_spaces, env=env)
        if not rc:
            if use_merge_install:
                # no need to clean CMake cache again
                arguments.remove('--cmake-clean-cache')
            with Scope('SUBSECTION', 'build tests'):
                rc = call_catkin_make_isolated(
                    args.rosdistro_name, args.workspace_root,
                    arguments + [
                        '--cmake-target', 'tests',
                        '--cmake-target-skip-unavailable'],
                    parent_result_spaces=parent_result_spaces, env=env)
            if not rc:
                # for workspaces with only plain cmake packages the setup files
                # generated by cmi won't implicitly source the underlays
                if parent_result_spaces is None:
                    parent_result_spaces = ['/opt/ros/%s' % args.rosdistro_name]
                arguments = [
                    '--executor', 'sequential',
                    '--event-handlers', 'console_direct+']
                if use_merge_install:
                    # keep using the same install layout
                    arguments += [
                        '--merge-install', '--install-base', 'install_merged']
                arguments += ['--test-result-base', 'test_results']
                with Scope('SUBSECTION', 'run tests'):
                    rc = call_catkin_make_isolated(
                        args.rosdistro_name, args.workspace_root, arguments,
                        parent_result_spaces=parent_result_spaces, env=env,
                        verb='test')
    finally:
        if args.clean_after:
            clean_workspace(args.workspace_root)

    return rc


if __name__ == '__main__':
    sys.exit(main())
